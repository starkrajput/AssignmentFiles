1.
The real life example of encapsulation in java is India's intelligence agency RAW. In encapsulation
we have 100% data hiding. Since our intelligence agency works in a Hybrid model where each agency 
share only the required information not less not more to another agency. In encapsulation we use getters 
and setters to get and put the values as per requirement, similarlly in intelligence agency 
alse to get the information or to give information they use a protocol or system to works 
fullfilling the properties of encapsulation. Also when a large amount of data is required for
analysis and processing it is done though a convention in agency which is also a features of 
encapsulation like data fetching from an API.





2.
From above example lets understand how encapsulation helps in data hiding.

package Tut;


class RAW{
	private String secretData;
	private int intelligenceSources;
	
	public String getSecretData() {
		return secretData;
	}
	public void setSecretData(String secretData) {
//		Here we can have filter to know data is Valid or invalid then only we can set our databse
//		If it is valid then only we will set the respective data.
		this.secretData = secretData;
	}
	public int getIntelligenceSources() {
		return intelligenceSources;
	}
	public void setIntelligenceSources(int intelligenceSources) {
//		Here we can have filter to know source data is Valid or invalid then only we can set our databse
//		If it is valid then only we will set the respective source data.
		this.intelligenceSources = intelligenceSources;
	}
}




public class Rabbit {
	public static void main(String[] args) {
		RAW r1 = new RAW();
		r1.setSecretData("K1");
		r1.setIntelligenceSources(7);

//		if the given data are valid then we can store that data 
//		and save it in our databases and later we can get it as hsoiwn down below.
		
                System.out.println(r1.getSecretData());
		System.out.println(r1.getIntelligenceSources());
	}
}


In similar way data can be shared and retrieved only through getter and setter keeping the 
our variable and date private and unaccesible as in case if invalid data is given then 
program will execute different operations as conveyed above.










3.POJO stands for Plain old java objects. The significance of POJO classes are found mainly in encapuslation implementation. POJO classes do not have any restriction
 as class are public and class variable that are with access specifiers / modifiers are accessed through getters and setters, these are essential part of POJO classes.
these getters and setters help in keeping the data hiding 100%. It makes coding easy and less complex.

Example :

class RAW{
	private String secretData;
	private int intelligenceSources;
	public String getSecretData() {
		return secretData;
	}
	public void setSecretData(String secretData) {
		this.secretData = secretData;
	}
	public int getIntelligenceSources() {
		return intelligenceSources;
	}
	public void setIntelligenceSources(int intelligenceSources) {
		this.intelligenceSources = intelligenceSources;
	}
}
Here RAW class is a POJO class.






4.
Nested class are classes within a class. we need Nested classes because sometimes we need  a Inner Class which coexist with the outer Class meaning both classes are
dependent on each other in order to use both classes functions. Also, sometimes we need independent classes for that we have static nested classes which makes code 
accessible directly. Nested classes also in keeping the similar requirements or logical code together and other similar program together for effiecent Java 
Code.

Types of Nested Classes are :
a) Static Class.
b) Non static Class or Inner Class.







5.
The 5 classes/Interfaces which are nested/Inner classes are 

package Tut;


1st :- Simple classes within classes. Example here Inner1 is inside the Outer1 and we can use both outer1method and inner1method.
class Outer1{
	int a =7;
	void outer1method() {
		System.out.println("The values of outer variable a is :"+a);
	}
	class Inner1{
		int b =6;
		void inner1method() {
			System.out.println("The values of outer variable a is :"+a);
		}
	}
}



2nd :- Here there is  a static class within class. example Outer2 has Inner2 as a static class.
class Outer2{
	static int a =7;
	void outer2method() {
		System.out.println("The values of outer variable a is :"+a);
	}
	static class Inner2{
		int b =6;
		void inner2method() {
			System.out.println("The values of outer variable a is :"+a+b);
		}
	}
}



3rd:-  Here we have interface within interface and outerClass3 has declaration part of Inner3 interface inner3. 
interface Outer3{
	void outer3();
	interface Inner3{
		void inner3();
	}
}


class outerClass3 implements Outer3.Inner3{
	public void inner3(){
		System.out.println("Inner3  of interface body is defining. ");
	}
}



 4th :- We have class Outer4A which has interface outer4 and in next class Outer4B its method body inner4 is defining. 
class Outer4A{
	interface outer4{
		void inner4();
	}
}

class Outer4B implements Outer4A.outer4{
	public void inner4() {
		System.out.println("inner4  interface of Outer4A body is defining. ");
	}
}




5th :- Here we have Class Outer5 which has a method outer5method which has a class Inner5  whose function is getting executed.
class Outer5{
	void outer5method() {
		class Inner5{
			void innermethod5() {
				System.out.println("innermethod5 body. ");
			}
		}
		Inner5 i5  = new Inner5();
		i5.innermethod5();
	}
}










6.
public class River {
	public static void main(String[] args) {
		 int[] arr = {1,4,2,6,7,3,5,9};
	       for(int i=0;i<arr.length;i++) {
	    	   for(int j=i+1;j<arr.length;j++) {
	    		   if(arr[j]>arr[i]) {
	    			   int a = arr[i];
	    			   arr[i]=arr[j];
	    			   arr[j]=a;
	    		   }
	    	   }
	       }
	       for(int i=0;i<arr.length;i++) {
	    	   System.out.println(arr[i]);
	       }
	    } 
	}





7.
public class  River{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);		
		String a = sc.next();
		String b = "";
		for(int i=a.length()-1;i>=0;i--) {
			b+= a.charAt(i);
		}
		if(a.equals(b)) {
			System.out.println("Given String is a Palindrome");
		}else {
			System.out.println("Given String is a Not a Palindrome");
		}
	    } 
	}





8.
public class Turtle {
	public static void main(String[] args) {	
		Scanner sc = new Scanner(System.in);		
		String s = sc.next();
		char arr[]= s.toCharArray();
		Arrays.sort(arr);
		int[] freq = new int[s.length()];
 		for(int i=0;i<s.length();i++) {
 			freq[i]=1;
 			for(int j=i+1;j<s.length();j++) {
 				if(arr[i]==arr[j]) {
 					freq[i]++;
 					arr[j]='0';
 				}
 			}
 		}
 		char ans = 'q';
 		int max = Integer.MIN_VALUE;
 		for(int i=0;i<freq.length;i++) {			
 			if(max<freq[i]) {
 				 ans = arr[i];
 				max = freq[i];
 			}
 		}
 		System.out.println(ans);				
	}	
	    } 





9.
public class Turtle {
	public static void main(String[] args) {	
		Scanner sc = new Scanner(System.in);		
		int a = sc.nextInt();
		int b =a;
		int[] freq = new int[9];
		for(int i=0;i<freq.length;i++) {
			freq[i]=0;
		}
		while(b!=0) {
			freq[b%10]++;
			b=b/10;
		}
		
		for(int i=0;i<freq.length;i++) {
			System.out.println(i+" has occured "+freq[i]+" times");
		}			
	}	
	    } 
	





10.
public class Turtle {
	public static void main(String[] args) {	
		Scanner sc = new Scanner(System.in);		
	    String s = sc.next();
	    String a = s.substring(1);
	    String b = s.substring(0,1).toUpperCase() +a;
	    String ans = "";
	    for(int i=b.length()-1;i>=0	;i--){
	    	ans  += b.charAt(i);
	    } 
	    
	    System.out.println(ans);
	}	
	    } 
	





11.
The output of the program is 
3131
3131
3131






12.
Original Code:
class A{
	  class B{
		static void methodB() {
			System.out.println("Method B");
		}
	}
}

Correct Code :
class A{
	static  class B{
		static void methodB() {
			System.out.println("Method B");
		}
	}
}


public class Turtle {
	public static void main(String[] args) {	
		B ob = new A.B();
	}	
	    } 


In order to intialise B object and to access the methodB there will be  static keyword in class B as in Correct Code.
	




13.
class ABC{
	  class XYZ{
		  int i =111;
	
	}
}
public class Turtle {
	public static void main(String[] args) {	
	     ABC obj1 = new ABC();
	     ABC.XYZ obj2 = obj1. new XYZ();
	     System.out.println(obj2.i);
		}	
	    } 
	




14.

  
package encapsulationTest;

  class Student {
	 private  String stdName;
	 private int stdRollNo; 
	 private int stdId ;
	
	public void setStdName(String stdName) {
		this.stdName = stdName;
	}
	
	public void setStdRollNo(int stdRollNo) {
		this.stdRollNo = stdRollNo;
	}
	
	public void setStdId(int stdId) {
		this.stdId = stdId;
	}
	
	
	public class ModelClass{
		public String getStdName() {
			return stdName;
		}
		
		public int getStdRollNo() {
			return stdRollNo;
		}
		public int getStdId() {
			return stdId;
		}
	}
	
	
	
}





package encapsulationTest;

import encapsulationTest.Student.ModelClass;

public class encapTest {

	public static void main(String[] args) {
		Student s1 = new Student();
        s1.setStdName("Stark");
        s1.setStdRollNo(7);
        s1.setStdId(1);
        
        Student s2 = new Student();
        s2.setStdName("Thor");
        s2.setStdRollNo(10);
        s2.setStdId(2);
        
        
        
        Student.ModelClass sg1 = s1. new ModelClass();
        Student.ModelClass sg2 = s2. new ModelClass();
        System.out.println("Student name is "+sg1.getStdName()+" with Roll Number "+ sg1.getStdRollNo()+" and his id is "+sg1.getStdId());
        System.out.println("Student name is "+sg2.getStdName()+" with Roll Number "+sg2.getStdRollNo()+" and his id is "+sg2.getStdId());
	}

}





